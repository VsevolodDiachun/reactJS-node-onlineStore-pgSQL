{"ast":null,"code":"import React from 'react';\nimport { authRoutes, publicRoutes } from \"../routes\";\nimport { createBrowserRouter } from \"react-router-dom\";\nconst isAuth = false;\n\n// export const router = createBrowserRouter([\n//     isAuth ? authRoutes.map(({path, Element}) => <Route key={path} path={path} element={<Element />}/>):\n//     publicRoutes.map(({path, Element}) => <Route key={path} path={path} element={<Element />}/>)\n// ])\n\nconst routes = isAuth ? authRoutes : publicRoutes;\nconsole.log(routes);\n// const routes = [\n//     {\n//         path:'/',\n//         element: <h1>Test</h1>\n//     }\n// ]\nexport const router = createBrowserRouter(routes);\n\n/*\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: (\n      <div>\n        <h1>Hello World</h1>\n        <Link to=\"about\">About Us</Link>\n      </div>\n    ),\n  },\n  {\n    path: \"about\",\n    element: <div>About</div>,\n  },\n]);\n */\n\n/*\nconst AppRouter = () => {\n    const isAuth = false\n\n    return (\n        <Routes>\n            {isAuth === true && authRoutes.map(({path, Element}) => <Route key={path} path={path} element={<Element />}/>)}\n            {publicRoutes.map(({path, Element}) => <Route key={path} path={path} element={<Element />}/>)}\n        </Routes>\n    );\n};\n\nexport default AppRouter;*/","map":{"version":3,"names":["React","authRoutes","publicRoutes","createBrowserRouter","isAuth","routes","console","log","router"],"sources":["/Users/diachun/Repository/Programming/Code/reactJS-node-onlineStore-pgSQL/client/src/components/AppRouter.js"],"sourcesContent":["import React from 'react';\nimport {authRoutes, publicRoutes} from \"../routes\";\nimport {createBrowserRouter} from \"react-router-dom\";\n\nconst isAuth = false\n\n// export const router = createBrowserRouter([\n//     isAuth ? authRoutes.map(({path, Element}) => <Route key={path} path={path} element={<Element />}/>):\n//     publicRoutes.map(({path, Element}) => <Route key={path} path={path} element={<Element />}/>)\n// ])\n\nconst routes = isAuth ? authRoutes:  publicRoutes\nconsole.log(routes)\n// const routes = [\n//     {\n//         path:'/',\n//         element: <h1>Test</h1>\n//     }\n// ]\nexport const router = createBrowserRouter(routes)\n\n/*\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: (\n      <div>\n        <h1>Hello World</h1>\n        <Link to=\"about\">About Us</Link>\n      </div>\n    ),\n  },\n  {\n    path: \"about\",\n    element: <div>About</div>,\n  },\n]);\n */\n\n/*\nconst AppRouter = () => {\n    const isAuth = false\n\n    return (\n        <Routes>\n            {isAuth === true && authRoutes.map(({path, Element}) => <Route key={path} path={path} element={<Element />}/>)}\n            {publicRoutes.map(({path, Element}) => <Route key={path} path={path} element={<Element />}/>)}\n        </Routes>\n    );\n};\n\nexport default AppRouter;*/\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,UAAU,EAAEC,YAAY,QAAO,WAAW;AAClD,SAAQC,mBAAmB,QAAO,kBAAkB;AAEpD,MAAMC,MAAM,GAAG,KAAK;;AAEpB;AACA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAGD,MAAM,GAAGH,UAAU,GAAGC,YAAY;AACjDI,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,MAAM,GAAGL,mBAAmB,CAACE,MAAM,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}